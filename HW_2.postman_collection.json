{
	"info": {
		"_postman_id": "6a6753b2-1ed9-45c0-99db-58866dc371b5",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ep_1_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_2_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp = pm.response.json();\r",
							"\r",
							"pm.test('checkname', function(){\r",
							"pm.expect(resp.name).to.eql('Alex');\r",
							"});\r",
							"\r",
							"pm.test('checkage', function(){\r",
							"pm.expect(resp.age).to.eql('24');\r",
							"});\r",
							"\r",
							"pm.test('checksal', function(){\r",
							"pm.expect(resp.salary).to.eql(300);\r",
							"});\r",
							"\r",
							"let req = request.data;\r",
							"\r",
							"pm.test('checkname', function(){\r",
							"pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"pm.test('checkage', function(){\r",
							"pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"pm.test('checksal', function(){\r",
							"pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"let family_resp = resp.family\r",
							"console.log (family_resp)\r",
							"\r",
							"pm.test('u_salary_1_5_year', function(){\r",
							"pm.expect(family_resp.u_salary_1_5_year).to.eql(+(req.salary*4));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "300",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_3_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp_1 = pm.response.json();\r",
							"let req_1 = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test ('checkname', function (){\r",
							"    pm.expect(resp_1.name).to.eql(req_1.name);\r",
							"});\r",
							"\r",
							"pm.test ('checkage', function (){\r",
							"    pm.expect(resp_1.age).to.eql(req_1.age);\r",
							"});\r",
							"\r",
							"pm.test ('checksal', function (){\r",
							"    pm.expect(resp_1.salary).to.eql(+req_1.salary);\r",
							"});\r",
							"\r",
							"let fam = resp_1.family;\r",
							"console.log(fam)\r",
							"\r",
							"let pets = fam.pets\r",
							"let doggy = pets.dog\r",
							"\r",
							"pm.test ('Dog has name', function (){\r",
							"    pm.expect(doggy).to.have.property('name');\r",
							"});\r",
							"\r",
							"pm.test ('Dog has age', function (){\r",
							"    pm.expect(doggy).to.have.property('age');\r",
							"});\r",
							"\r",
							"pm.test (\"dog's name\", function (){\r",
							"    pm.expect(doggy.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"pm.test (\"dog's age\", function (){\r",
							"    pm.expect(doggy.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Alex&age=24&salary=300",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_4_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let req_2 = pm.request.url.query.toObject()\r",
							"let resp_2 = pm.response.json()\r",
							"\r",
							"pm.test ('nameresp=namereq', function () {\r",
							"    pm.expect(resp_2.name).to.eql(req_2.name)\r",
							"})\r",
							"\r",
							"let age_req_Int = parseInt(req_2.age)\r",
							"pm.test ('ageresp=agereq', function () {\r",
							"    pm.expect(resp_2.age).to.eql(age_req_Int)\r",
							"})\r",
							"\r",
							"console.log (req_2.salary)\r",
							"console.log (resp_2.salary)\r",
							"\r",
							"console.log(resp_2.salary[0])\r",
							"console.log(resp_2.salary[1])\r",
							"console.log(resp_2.salary[2])\r",
							"\r",
							"let salary_int = parseInt(req_2.salary)\r",
							"pm.test ('1stsalelemreq = 1stsalelemresp', function (){\r",
							"    pm.expect(resp_2.salary[0]).to.eql(salary_int)\r",
							"})\r",
							"\r",
							"let salary_int_1 = parseInt(resp_2.salary[1])\r",
							"pm.test ('1stsalelemreq = *2salelemresp', function (){\r",
							"    pm.expect(salary_int_1).to.eql(salary_int*2)\r",
							"})\r",
							"\r",
							"let salary_int_2 = parseInt(resp_2.salary[2])\r",
							"pm.test ('1ndsalelemreq = *3salelemresp', function (){\r",
							"    pm.expect(salary_int_2).to.eql(salary_int*3)\r",
							"})\r",
							"\r",
							"pm.environment.set(\"name\", req_2.name);\r",
							"pm.environment.set(\"age\", age_req_Int);\r",
							"pm.environment.set(\"salary\", salary_int);\r",
							"\r",
							"let salaries = resp_2.salary;\r",
							"let array = [salaries[0], parseInt(salaries[1]), parseInt(salaries[2])]\r",
							"\r",
							"for (let i = 0; i <array.length; i++) {\r",
							"console.log(array[i]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Aleksey&age=24&salary=300",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Aleksey"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ep_5_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let resp_3 = pm.response.json();\r",
							"let req_3 = request.data;\r",
							"\r",
							"\r",
							"pm.test ('jsonresp has start_qa_salary', function (){\r",
							"pm.expect (resp_3).to.have.property('start_qa_salary')\r",
							"})\r",
							"\r",
							"pm.test ('jsonresp has qa_salary_after_6_months', function (){\r",
							"pm.expect (resp_3).to.have.property('qa_salary_after_6_months')\r",
							"})\r",
							"\r",
							"pm.test ('jsonresp has qa_salary_after_12_months', function (){\r",
							"pm.expect (resp_3).to.have.property('qa_salary_after_12_months')\r",
							"})\r",
							"\r",
							"pm.test ('jsonresp has qa_salary_after_1.5_year', function (){\r",
							"pm.expect (resp_3).to.have.property('qa_salary_after_1.5_year')\r",
							"})\r",
							"\r",
							"pm.test ('jsonresp has qa_salary_after_3.5_years', function (){\r",
							"pm.expect (resp_3).to.have.property('qa_salary_after_3.5_years')\r",
							"})\r",
							"\r",
							"pm.test ('jsonresp has person', function (){\r",
							"pm.expect (resp_3).to.have.property('person')\r",
							"})\r",
							"\r",
							"let req_3_salaryInt = parseInt(req_3.salary)\r",
							"pm.test ('start resp is eq to start req', function (){\r",
							"pm.expect (resp_3.start_qa_salary).to.eql(req_3_salaryInt)\r",
							"})\r",
							"\r",
							"pm.test('6mon is eq to *2', function () {\r",
							"    pm.expect (resp_3.qa_salary_after_6_months).to.eql(req_3_salaryInt*2)\r",
							"})\r",
							"\r",
							"pm.test('12mon is eq to *2.7', function () {\r",
							"    pm.expect (resp_3.qa_salary_after_12_months).to.eql(req_3_salaryInt*2.7)\r",
							"})\r",
							"\r",
							"pm.test('1.5year is eq to *3.3', function () {\r",
							"    pm.expect (resp_3['qa_salary_after_1.5_year']).to.eql(req_3_salaryInt*3.3)\r",
							"})\r",
							"\r",
							"pm.test('3.5years is eq to *3.8', function () {\r",
							"    pm.expect (resp_3['qa_salary_after_3.5_years']).to.eql(req_3_salaryInt*3.8)\r",
							"})\r",
							"\r",
							"let person = resp_3.person\r",
							"let u_name = person.u_name\r",
							"\r",
							"pm.test('1_elem_per = salary', function () {\r",
							"    pm.expect(u_name[1]).to.eql(req_3_salaryInt)\r",
							"})\r",
							"\r",
							"let u_age = person.u_age\r",
							"let req_ageInt = parseInt(req_3.age)\r",
							"\r",
							"pm.test('u_age = age_req',function () {\r",
							"    pm.expect(req_ageInt).to.eql(u_age)\r",
							"})\r",
							"\r",
							"let u_salary = person.u_salary_5_years\r",
							"pm.test ('u_sal_5 is eql to *4.2'), function () {\r",
							"    pm.expect(u_salary_5_years).to.eql(req_3_salaryInt*4.2)\r",
							"}\r",
							"\r",
							"let array = [person.u_age, person.u_name[0],person.u_name[1],person.u_name[2],person.u_salary_5_years];\r",
							"for (let i = 0; i <array.length; i++) {\r",
							"console.log(array[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "",
			"type": "string"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "age",
			"value": "",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "",
			"type": "string"
		}
	]
}